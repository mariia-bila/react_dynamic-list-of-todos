{"version":3,"sources":["components/TodoList/TodoList.tsx","api.ts","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["TodoList","state","value","selected","getPreparedTodos","props","todos","filter","todo","completed","selectUser","this","filtredTodos","title","includes","className","placeholder","onChange","event","setState","target","map","classNames","htmlFor","String","id","type","checked","readOnly","onClick","userId","React","Component","BASE_URL","getUsers","fetch","then","response","json","CurrentUser","user","prevProps","name","email","phone","App","selectedUserId","errorMessage","ok","Promise","reject","Error","todosFromServer","catch","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.7231a6f2.chunk.js","sourcesContent":["import React from 'react';\nimport classNames from 'classnames';\nimport { Todo } from '../types/Todo';\nimport './TodoList.scss';\n\ntype Props = {\n  todos: Todo[]\n  selectUser: (ususerId:number) => void,\n};\n\ntype State = {\n  value: string,\n  selected: string,\n};\n\nexport class TodoList extends React.Component<Props, State> {\n  state: State = {\n    value: '',\n    selected: 'all',\n  };\n\n  getPreparedTodos = () => this.props.todos.filter(todo => {\n    switch (this.state.selected) {\n      case 'completed':\n        return todo.completed === true;\n      case 'active':\n        return todo.completed === false;\n      default:\n        return todo;\n    }\n  });\n\n  render() {\n    const { selectUser } = this.props;\n    const filtredTodos = this.getPreparedTodos()\n      .filter(todo => todo.title.includes(this.state.value));\n\n    return (\n      <div className=\"TodoList\">\n        <h2>Todos:</h2>\n\n        <div className=\"TodoList__list-container\">\n          <input\n            placeholder=\"Enter the title of todo\"\n            value={this.state.value}\n            onChange={(event) => this.setState({ value: event.target.value })}\n          />\n\n          <select\n            value={this.state.selected}\n            onChange={(event) => this.setState({ selected: event.target.value })}\n          >\n            <option value=\"all\">\n              All\n            </option>\n\n            <option value=\"active\">\n              Active\n            </option>\n\n            <option value=\"completed\">\n              Completed\n            </option>\n          </select>\n\n          <ul className=\"TodoList__list\">\n            {filtredTodos.map(todo => (\n              <li\n                className={classNames(\n                  'TodoList__item',\n                  { 'TodoList__item--checked': todo.completed },\n                  { 'TodoList__item--unchecked': !todo.completed },\n                )}\n                key={todo.id}\n              >\n                <label htmlFor={String(todo.id)}>\n                  <input\n                    type=\"checkbox\"\n                    id={String(todo.id)}\n                    checked={todo.completed}\n                    readOnly\n                  />\n                  <p>{todo.title}</p>\n                </label>\n\n                <button\n                  className=\"\n                    TodoList__user-button\n                    TodoList__user-button--selected\n                    button\n                    \"\n                  type=\"button\"\n                  onClick={() => {\n                    selectUser(todo.userId);\n                  }}\n                >\n                  {todo.userId}\n                </button>\n              </li>\n            ))}\n          </ul>\n        </div>\n      </div>\n    );\n  }\n}\n","// eslint-disable-next-line\nconst BASE_URL = `https://mate.academy/students-api`;\n\nexport const getTodos = () => {\n  return fetch(`${BASE_URL}/todos`)\n    .then(response => {\n      return response.ok\n        ? response.json()\n        : Promise.reject(new Error('Some error message'));\n    });\n};\n\nexport const getUsers = (userId: number) => {\n  return fetch(`${BASE_URL}/users/${userId}`)\n    .then(response => response.json());\n};\n","import React from 'react';\nimport './CurrentUser.scss';\nimport { getUsers } from '../../api';\nimport { User } from '../types/User';\n\ntype Props = {\n  userId: number,\n};\n\ntype State = {\n  user: User | null,\n};\n\nexport class CurrentUser extends React.Component<Props, State> {\n  state:State = {\n    user: null,\n  };\n\n  componentDidMount() {\n    getUsers(this.props.userId)\n      .then(response => {\n        this.setState({ user: response });\n      });\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    if (prevProps.userId !== this.props.userId) {\n      getUsers(this.props.userId)\n        .then(response => {\n          this.setState({ user: response });\n        });\n    }\n  }\n\n  render() {\n    return (\n      this.state.user && (\n        <div className=\"CurrentUser\">\n          <h2 className=\"CurrentUser__title\">\n            <span>\n              {`Selected user: ${this.props.userId}`}\n            </span>\n          </h2>\n\n          <h3 className=\"CurrentUser__name\">{this.state.user.name}</h3>\n          <p className=\"CurrentUser__email\">{this.state.user.email}</p>\n          <p className=\"CurrentUser__phone\">{this.state.user.phone}</p>\n\n          <button\n            type=\"button\"\n            onClick={() => this.setState({ user: null })}\n          >\n            Clear\n          </button>\n        </div>\n      )\n    );\n  }\n}\n","import React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { getTodos } from './api';\nimport { Todo } from './components/types/Todo';\n\ninterface State {\n  selectedUserId: number;\n  todos: Todo[] | null,\n  errorMessage: string,\n}\n\nclass App extends React.Component<{}, State> {\n  state: State = {\n    selectedUserId: 0,\n    todos: null,\n    errorMessage: '',\n  };\n\n  componentDidMount() {\n    getTodos()\n      .then(todosFromServer => {\n        this.setState({ todos: todosFromServer });\n      })\n      .catch(() => {\n        this.setState({ errorMessage: 'Can\\'t load todos' });\n      });\n  }\n  //     .then(todosFromServer => {\n  //       this.setState({ todos: todosFromServer });\n  //     });\n  // }\n\n  selectUser = (userId: number) => {\n    if (userId !== this.state.selectedUserId) {\n      this.setState({\n        selectedUserId: userId,\n      });\n    }\n  };\n\n  render() {\n    const { selectedUserId } = this.state;\n\n    return (\n      <div className=\"App\">\n        {this.state.todos && (\n          <div className=\"App__sidebar\">\n            {this.state.errorMessage}\n            <TodoList todos={this.state.todos} selectUser={this.selectUser} />\n          </div>\n        )}\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId ? (\n              <CurrentUser userId={this.state.selectedUserId} />\n            ) : 'No user selected'}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}